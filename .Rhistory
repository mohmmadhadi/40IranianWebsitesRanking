prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
#VIKOR
V <- 0.5
VIKOR(data_1,weights, cb, V)
library(MCDM)
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
#VIKOR
V <- 0.5
VIKOR(data_1,weights, cb, V)
library(MCDM)
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
#VIKOR
V <- 0.5
VIKOR(data_1,weights, cb, V)
library(MCDM)
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
#VIKOR
V <- 0.5
VIKOR(data_1,weights, cb, V)
vikor(data_1,weights, cb, V)
library(MCDM)
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
#VIKOR
V <- 0.5
vikor(data_1,weights, cb, V)
View(data_1)
vikor <- vikor(data_1,weights, cb, V)
#Linear Topsis
topsislinear <- TOPSISLinear(data_1,weights,cb)
View(topsislinear)
View(vikor)
library(MCDM)
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
#VIKOR
V <- 0.5
vikor <- vikor(data_1,weights, cb, V)
#Linear Topsis
topsislinear <- TOPSISLinear(data_1,weights,cb)
View(topsislinear)
#WASPAS
waspas <- WASPAS(data_1,weights,cb,0.5)
View(waspas)
library(GGally)
install.packages("GGally")
library(GGally)
ggparcoord(result, columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking", scale = "global")
ggparcoord(vikor, columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking", scale = "global")
ggparcoord(vikor, columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking", scale = "globalminmax")
ggparcoord(vikor, columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking", scale = "std")
ggparcoord(vikor, columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking")
ggparcoord(result[, c("S", "R", "Q", "Ranking")], columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking", scale = "global")
ggparcoord(vikor[, c("S", "R", "Q", "Ranking")], columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking", scale = "global")
ggparcoord(vikor[, c("S", "R", "Q", "Ranking")],
columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking",
scale = "robust")
ggparcoord(vikor[, c("S", "R", "Q", "Ranking")],
columns = c("S", "R", "Q", "Ranking"), groupColumn = "Ranking")
install.packages("plotly")
library(plotly)
# Assuming 'result' is your data frame
plot_ly(
data = vikor[, c("S", "R", "Q", "Ranking")],
type = "parcoords",
line = list(color = vikor$Ranking, colorscale = "Viridis"),
dimensions = list(
list(range = c(min(vikor$S), max(vikor$S)), label = "S"),
list(range = c(min(vikor$R), max(vikor$R)), label = "R"),
list(range = c(min(vikor$Q), max(vikor$Q)), label = "Q"),
list(range = c(min(vikor$Ranking), max(vikor$Ranking)), label = "Ranking")
)
)
install.packages("MASS")
library(MASS)
parcoord(vikor[, c("S", "R", "Q", "Ranking")], col = result$Ranking)
parcoord(vikor[, c("S", "R", "Q", "Ranking")], col = vikor$Ranking)
library(ggplot2)
# Assuming 'result' is your data frame
ggplot(vikor, aes(x = Ranking, y = S, size = Q, color = Ranking)) +
geom_point(alpha = 0.7) +
labs(title = "VIKOR Rankings and Metrics", x = "Ranking", y = "S") +
theme_minimal()
View(weights)
weights
# Generate the bar plot
criterion <- colnames(data)
# Generate the bar plot
criterion <- colnames(data[1,])
# Generate the bar plot
criterion <- colnames(data[2,])
# Generate the bar plot
criterion <- colnames(data[2:])
# Generate the bar plot
criterion <- colnames(data[2:6])
ggplot(criteria_data, aes(x = reorder(criterion, weights), y = weights, fill = cb)) +
geom_bar(stat = "identity") +
coord_flip() + # Flips the axes so the criteria are on the y-axis
labs(title = "Criterion Weights for Website Performance Evaluation",
x = "Criterion",
y = "Weight",
fill = "Criterion Nature") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") # Colours for Maximize/Minimize
criteria_data <- data.frame(criterion, weights, cb)
ggplot(criteria_data, aes(x = reorder(criterion, weights), y = weights, fill = cb)) +
geom_bar(stat = "identity") +
coord_flip() + # Flips the axes so the criteria are on the y-axis
labs(title = "Criterion Weights for Website Performance Evaluation",
x = "Criterion",
y = "Weight",
fill = "Criterion Nature") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") # Colours for Maximize/Minimize
# Shanon weights bar plot
ggplot(criteria_data, aes(x = reorder(criterion, weights), y = weights, fill = cb)) +
geom_bar(stat = "identity") +
coord_flip() + # Flips the axes so the criteria are on the y-axis
labs(title = "Criterion Weights",
x = "Criterion",
y = "Weight",
fill = "Criterion Nature") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") # Colours for Maximize/Minimize
#MMOORA
MMOORA <- MMOORA(data_1, weights, cb)
#Linear Topsis
topsislinear <- TOPSISLinear(data_1,weights,cb)
View(topsislinear)
library(MCDM)
library(ggplot2)
#Reading the csv file
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
View(weights)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
criterion <- colnames(data[2:6])
criteria_data <- data.frame(criterion, weights, cb)
# Shanon weights bar plot
ggplot(criteria_data, aes(x = reorder(criterion, weights), y = weights, fill = cb)) +
geom_bar(stat = "identity") +
coord_flip() + # Flips the axes so the criteria are on the y-axis
labs(title = "Criterion Weights",
x = "Criterion",
y = "Weight",
fill = "Criterion Nature") +
theme_minimal() +
scale_fill_brewer(palette = "Set1") # Colours for Maximize/Minimize
#VIKOR
V <- 0.5
vikor <- vikor(data_1,weights, cb, V)
View(vikor)
# Vikor Plot
ggplot(vikor, aes(x = Ranking, y = S, size = Q, color = Ranking)) +
geom_point(alpha = 0.7) +
labs(title = "VIKOR Rankings and Metrics", x = "Ranking", y = "S") +
theme_minimal()
#Linear Topsis
topsislinear <- TOPSISLinear(data_1,weights,cb)
library(MCDM)
library(ggplot2)
#Reading the csv file
data <- read.csv("data.csv")
#normalizing data
data <- normalize_data(data)
#shannon entropy weights
weights <- shannon_entropy_weights(data)
#Preparing data
rownames(data) <- data[,1]
prepared_data <- data[,c(2:6)]
data_1 <- as.matrix(prepared_data)
cb <- c("max","max","max","max","min")
criterion <- colnames(data[2:6])
criteria_data <- data.frame(criterion, weights, cb)
#VIKOR
V <- 0.5
vikor <- vikor(data_1,weights, cb, V)
#Linear Topsis
topsislinear <- TOPSISLinear(data_1,weights,cb)
View(topsislinear)
ggplot(data = topsislinear, aes(x = R, y = Ranking, label = Alternatives)) +
geom_point() +  # This adds the scatter plot points
geom_text(aes(label=Alternatives), hjust=1, vjust=1) + # Adds labels to points
scale_y_reverse() +  # This reverses the y-axis to have the best rank at the top
labs(x = "Distance from Ideal Solution (R)", y = "Ranking") +
ggtitle("Linear TOPSIS Model Rankings") +
theme_minimal()  # A clean theme
ggplot(data = waspas, aes(x = Alternatives, y = value, fill = variable)) +
geom_bar(stat = "identity", aes(fill = variable), position = "dodge", data = subset(waspas_long, variable != "Q")) +
geom_line(aes(group = 1, colour = "Q", y = Q*10), data = waspas_results) + # Multiplying Q to scale it for the secondary axis
geom_point(aes(colour = "Q", y = Q*10), data = waspas_results) +
scale_colour_manual(values = "red") +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Model", colour = "Line", linetype = "Line") +
theme_minimal() +
scale_y_continuous(sec.axis = sec_axis(~./10, name = "Q Value")) + # Dividing by 10 to align with the primary axis
ggtitle("WASPAS Model Visualization")
#WASPAS
waspas <- WASPAS(data_1,weights,cb,0.5)
ggplot(data = waspas, aes(x = Alternatives, y = value, fill = variable)) +
geom_bar(stat = "identity", aes(fill = variable), position = "dodge", data = subset(waspas_long, variable != "Q")) +
geom_line(aes(group = 1, colour = "Q", y = Q*10), data = waspas_results) + # Multiplying Q to scale it for the secondary axis
geom_point(aes(colour = "Q", y = Q*10), data = waspas_results) +
scale_colour_manual(values = "red") +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Model", colour = "Line", linetype = "Line") +
theme_minimal() +
scale_y_continuous(sec.axis = sec_axis(~./10, name = "Q Value")) + # Dividing by 10 to align with the primary axis
ggtitle("WASPAS Model Visualization")
# Melt the data for use in ggplot2
waspas_long <- reshape2::melt(waspas_results, id.vars = c('Alternatives', 'Ranking'))
install.packages(reshape2)
install.packages("reshape2")
# Create a combined bar and line plot
ggplot(data = waspas_long, aes(x = Alternatives, y = value, fill = variable)) +
geom_bar(stat = "identity", aes(fill = variable), position = "dodge", data = subset(waspas_long, variable != "Q")) +
geom_line(aes(group = 1, colour = "Q", y = Q*10), data = waspas) + # Multiplying Q to scale it for the secondary axis
geom_point(aes(colour = "Q", y = Q*10), data = waspas) +
scale_colour_manual(values = "red") +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Model", colour = "Line", linetype = "Line") +
theme_minimal() +
scale_y_continuous(sec.axis = sec_axis(~./10, name = "Q Value")) + # Dividing by 10 to align with the primary axis
ggtitle("WASPAS Model Visualization")
# Melt the data for use in ggplot2
waspas_long <- reshape2::melt(waspas_results, id.vars = c('Alternatives', 'Ranking'))
# Melt the data for use in ggplot2
waspas_long <- reshape2::melt(waspas, id.vars = c('Alternatives', 'Ranking'))
# Create a combined bar and line plot
ggplot(data = waspas_long, aes(x = Alternatives, y = value, fill = variable)) +
geom_bar(stat = "identity", aes(fill = variable), position = "dodge", data = subset(waspas_long, variable != "Q")) +
geom_line(aes(group = 1, colour = "Q", y = Q*10), data = waspas) + # Multiplying Q to scale it for the secondary axis
geom_point(aes(colour = "Q", y = Q*10), data = waspas) +
scale_colour_manual(values = "red") +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Model", colour = "Line", linetype = "Line") +
theme_minimal() +
scale_y_continuous(sec.axis = sec_axis(~./10, name = "Q Value")) + # Dividing by 10 to align with the primary axis
ggtitle("WASPAS Model Visualization")
View(waspas_long)
# Create a combined bar and line plot
ggplot(data = waspas_long, aes(x = Alternatives, y = value, fill = variable)) +
geom_bar(stat = "identity", aes(fill = variable), position = "dodge", data = subset(waspas_long, variable != "Q")) +
geom_line(aes(group = 1, colour = "Q", y = Q*10), data = waspas) + # Multiplying Q to scale it for the secondary axis
geom_point(aes(colour = "Q", y = Q*10), data = waspas) +
scale_colour_manual(values = "red") +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Model", colour = "Line", linetype = "Line") +
theme_minimal() +
scale_y_continuous(sec.axis = sec_axis(~./10, name = "Q Value")) + # Dividing by 10 to align with the primary axis
ggtitle("WASPAS Model Visualization")
# Melt the data for plotting
waspas_long <- melt(waspas_results, id.vars = c('Alternatives', 'Ranking'), variable.name = 'Metric', value.name = 'Value')
install.packages("melt")
# Melt the data for plotting
waspas_long <- melt(waspas_results, id.vars = c('Alternatives', 'Ranking'), variable.name = 'Metric', value.name = 'Value')
# Melt the data for plotting
waspas_long <- reshape::melt(waspas_results, id.vars = c('Alternatives', 'Ranking'), variable.name = 'Metric', value.name = 'Value')
# Melt the data for plotting
waspas_long <- reshapew::melt(waspas_results, id.vars = c('Alternatives', 'Ranking'), variable.name = 'Metric', value.name = 'Value')
# Melt the data for plotting
waspas_long <- reshape2::melt(waspas_results, id.vars = c('Alternatives', 'Ranking'), variable.name = 'Metric', value.name = 'Value')
# Melt the data for plotting
waspas_long <- reshape2::melt(waspas, id.vars = c('Alternatives', 'Ranking'), variable.name = 'Metric', value.name = 'Value')
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = row.names(data), y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
websites <- row.names(data)
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = websites, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = websites, y = Value)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
View(waspas_long)
waspas_long$Alternatives <- websites
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = websites, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
View(waspas_long)
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = websites, y = Value)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = Alternatives, y = Value)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
ggtitle("WASPAS Model Visualization")
# Create the ggplot
p <- ggplot(data = waspas_results, aes(x = Alternatives)) +
geom_bar(aes(y = WSM, fill = "WSM"), stat = "identity", position = position_dodge(width = 0.7)) +
geom_bar(aes(y = WPM, fill = "WPM"), stat = "identity", position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Create the ggplot
p <- ggplot(data = waspas, aes(x = Alternatives)) +
geom_bar(aes(y = WSM, fill = "WSM"), stat = "identity", position = position_dodge(width = 0.7)) +
geom_bar(aes(y = WPM, fill = "WPM"), stat = "identity", position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Add the secondary axis for Q values
p <- p + geom_point(aes(y = Q / transformation_factor, color = "Q"), size = 4) +
scale_y_continuous(
sec.axis = sec_axis(~ . * transformation_factor, name = "Q Value")
) +
scale_color_manual(values = c("Q" = "red")) +
labs(color = "Index") +
theme(legend.position = "bottom") # Adjust legend position as needed
print(p)
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = Alternatives, y = Value)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) #+
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = Alternatives, y = Value)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = metric)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Ranking), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Adding the Q values as points
# Adjust the scale for Q if necessary to make sure it fits properly with the current y-axis scale
ggplot(waspas_long, aes(x = Alternatives, y = Value)) +
geom_bar(aes(fill = Metric), data = subset(waspas_long, Metric != "Q"), stat = "identity", position = position_dodge()) +
geom_point(aes(colour = Metric, y = Q), data = subset(waspas_long, Metric == "Q")) +
scale_colour_manual(values = c("Q" = "red")) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "Value", fill = "Metric", colour = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green")) +
labs(x = "Alternatives", y = "WSM/WPM/Q Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long, Metric != 'Q'), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green", "Q" = "red")) +
labs(x = "Alternatives", y = "WSM/WPM/Q Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
# Create a grouped bar plot for WSM and WPM
ggplot(waspas_long, aes(x = Alternatives, y = Value, fill = Metric)) +
geom_bar(data = subset(waspas_long), aes(fill = Metric), stat="identity", position=position_dodge()) +
scale_fill_manual(values = c("WSM" = "blue", "WPM" = "green", "Q" = "red")) +
labs(x = "Alternatives", y = "WSM/WPM/Q Value", fill = "Metric") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("WASPAS Model Visualization")
waspas$Alternatives <- websites
View(waspas)
model_compare <- data.frame("Alternative"=data[,1],"VIKOR"=vikor[,5],
"TOPSIS"=topsislinear[,3], "WASPAS"=waspas[,5])
View(model_compare)
write.csv(model_compare,file="model_compare.csv")
